import requests
import json
import time
import os
from typing import Optional, Dict, Any, List
from datetime import datetime
from system_prompts import SYSTEM_PROMPTS, get_prompt, list_available_prompts, get_prompt_name

class AdvancedLocalChatBot:
    def __init__(self, base_url: str = "http://localhost:11434"):
        self.base_url = base_url.rstrip("/")
        self.api_url = f"{self.base_url}/api/chat"
        self.models_endpoint = f"{self.base_url}/api/tags"
        # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏: –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç Qwen3-30B
        self.model = os.getenv('OLLAMA_MODEL') or "hf.co/unsloth/Qwen3-30B-A3B-Instruct-2507-GGUF:IQ4_XS"
        self.conversation_history = []
        self.current_prompt_key = "general_assistant"
        self.current_prompt = get_prompt(self.current_prompt_key)
        self.conversations_dir = "conversations"
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
        if not os.path.exists(self.conversations_dir):
            os.makedirs(self.conversations_dir)
    
    def check_connection(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ollama"""
        try:
            response = requests.get(self.models_endpoint, timeout=5)
            if response.status_code == 200:
                data = response.json()
                models = data.get("models") or data.get("data") or []
                if models:
                    first = models[0]
                    self.model = first.get("name") or first.get("id") or first.get("model")
                    print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Ollama")
                    print(f"üìã –î–æ—Å—Ç—É–ø–Ω–∞—è –º–æ–¥–µ–ª—å: {self.model}")
                    return True
                else:
                    print("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
                    return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {response.status_code}")
                return False
        except requests.exceptions.ConnectionError:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Ollama")
            print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Ollama –∑–∞–ø—É—â–µ–Ω –∏ —Å–µ—Ä–≤–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω")
            return False
        except requests.exceptions.Timeout:
            print("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
            return False
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def set_system_prompt(self, prompt_key: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞"""
        if prompt_key in SYSTEM_PROMPTS:
            self.current_prompt_key = prompt_key
            self.current_prompt = get_prompt(prompt_key)
            print(f"üéØ –†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {get_prompt_name(prompt_key)}")
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç: {prompt_key}")
            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã:", ", ".join(SYSTEM_PROMPTS.keys()))
    
    def send_message(self, message: str, use_system_prompt: bool = True) -> str:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–¥–µ–ª–∏"""
        if not self.model:
            if not self.check_connection():
                return "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Ollama"
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        messages = []
        
        if use_system_prompt and self.current_prompt:
            messages.append({"role": "system", "content": self.current_prompt})
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        messages.extend(self.conversation_history)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        messages.append({"role": "user", "content": message})
        
        try:
            payload = {
                "model": self.model,
                "messages": messages,
                "stream": False,
                "options": {
                    "temperature": 0.7,
                    "num_predict": 2048,
                    "top_p": 0.9,
                    "frequency_penalty": 0.0,
                    "presence_penalty": 0.0
                }
            }
            
            response = requests.post(
                self.api_url,
                json=payload,
                headers={"Content-Type": "application/json"},
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                assistant_message = (
                    result.get("message", {}).get("content")
                    or (result.get("choices", [{}])[0].get("message", {}).get("content"))
                    or ""
                )
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
                self.conversation_history.append({"role": "user", "content": message})
                self.conversation_history.append({"role": "assistant", "content": assistant_message})
                
                # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π)
                if len(self.conversation_history) > 40:
                    self.conversation_history = self.conversation_history[-40:]
                
                return assistant_message
            else:
                return f"–û—à–∏–±–∫–∞: {response.status_code} - {response.text}"
                
        except requests.exceptions.Timeout:
            return "–û—à–∏–±–∫–∞: –ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞"
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}"
    
    def clear_history(self):
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        self.conversation_history = []
        print("üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –æ—á–∏—â–µ–Ω–∞")
    
    def save_conversation(self, filename: str = None):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –≤ —Ñ–∞–π–ª"""
        if not filename:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"{self.conversations_dir}/conversation_{timestamp}.json"
        
        try:
            conversation_data = {
                "timestamp": datetime.now().isoformat(),
                "model": self.model,
                "system_prompt": {
                    "key": self.current_prompt_key,
                    "name": get_prompt_name(self.current_prompt_key),
                    "content": self.current_prompt
                },
                "history": self.conversation_history
            }
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(conversation_data, f, ensure_ascii=False, indent=2)
            print(f"üíæ –†–∞–∑–≥–æ–≤–æ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {filename}")
            return filename
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}")
            return None
    
    def load_conversation(self, filename: str):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                conversation_data = json.load(f)
            
            self.conversation_history = conversation_data.get("history", [])
            if "system_prompt" in conversation_data:
                prompt_key = conversation_data["system_prompt"].get("key", "general_assistant")
                self.set_system_prompt(prompt_key)
            
            print(f"üìÇ –†–∞–∑–≥–æ–≤–æ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ {filename}")
            print(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.conversation_history)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {str(e)}")
            return False
    
    def list_saved_conversations(self):
        """–°–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤"""
        try:
            files = [f for f in os.listdir(self.conversations_dir) if f.endswith('.json')]
            if not files:
                print("üìã –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤")
                return []
            
            print("üìã –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã:")
            for i, file in enumerate(files, 1):
                filepath = os.path.join(self.conversations_dir, file)
                try:
                    with open(filepath, 'r', encoding='utf-8') as f:
                        data = json.load(f)
                    timestamp = data.get("timestamp", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                    prompt_name = data.get("system_prompt", {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                    message_count = len(data.get("history", []))
                    print(f"{i}. {file}")
                    print(f"   –í—Ä–µ–º—è: {timestamp}")
                    print(f"   –†–µ–∂–∏–º: {prompt_name}")
                    print(f"   –°–æ–æ–±—â–µ–Ω–∏–π: {message_count}")
                    print()
                except:
                    print(f"{i}. {file} (–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è)")
            
            return files
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: {str(e)}")
            return []
    
    def show_conversation_stats(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:")
        print(f"   –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {get_prompt_name(self.current_prompt_key)}")
        print(f"   –ò—Å—Ç–æ—Ä–∏—è: {len(self.conversation_history)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        print(f"   –ú–æ–¥–µ–ª—å: {self.model or '–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞'}")
        
        if self.conversation_history:
            user_messages = len([m for m in self.conversation_history if m["role"] == "user"])
            assistant_messages = len([m for m in self.conversation_history if m["role"] == "assistant"])
            print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_messages} —Å–æ–æ–±—â–µ–Ω–∏–π")
            print(f"   –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {assistant_messages} —Å–æ–æ–±—â–µ–Ω–∏–π")


def main():
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —á–∞—Ç–±–æ—Ç–∞"""
    print("ü§ñ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ª–æ–∫–∞–ª—å–Ω—ã–π —á–∞—Ç–±–æ—Ç –Ω–∞ –±–∞–∑–µ Ollama")
    print("=" * 60)
    
    chatbot = AdvancedLocalChatBot()
    
    if not chatbot.check_connection():
        return
    
    print("\nüéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã:")
    prompts = list_available_prompts()
    for key, name in prompts.items():
        print(f"   {key}: {name}")
    
    print(f"\nüí° –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {get_prompt_name(chatbot.current_prompt_key)}")
    print("\nüìã –ö–æ–º–∞–Ω–¥—ã:")
    print("   /mode <–∫–ª—é—á> - —Å–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã")
    print("   /clear - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é")
    print("   /save [–∏–º—è_—Ñ–∞–π–ª–∞] - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä")
    print("   /load <–∏–º—è_—Ñ–∞–π–ª–∞> - –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä")
    print("   /list - —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤")
    print("   /stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    print("   /help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É")
    print("   /exit - –≤—ã–π—Ç–∏")
    print("=" * 60)
    
    while True:
        try:
            user_input = input("\n–í—ã: ").strip()
            
            if not user_input:
                continue
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
            if user_input.startswith('/'):
                parts = user_input.split(' ', 1)
                command = parts[0].lower()
                
                if command == '/exit':
                    print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    break
                elif command == '/clear':
                    chatbot.clear_history()
                    continue
                elif command == '/save':
                    filename = parts[1] if len(parts) > 1 else None
                    chatbot.save_conversation(filename)
                    continue
                elif command == '/load':
                    if len(parts) > 1:
                        filename = parts[1]
                        if not filename.endswith('.json'):
                            filename += '.json'
                        if not filename.startswith(chatbot.conversations_dir):
                            filename = os.path.join(chatbot.conversations_dir, filename)
                        chatbot.load_conversation(filename)
                    else:
                        print("‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞: /load <–∏–º—è_—Ñ–∞–π–ª–∞>")
                    continue
                elif command == '/list':
                    chatbot.list_saved_conversations()
                    continue
                elif command == '/stats':
                    chatbot.show_conversation_stats()
                    continue
                elif command == '/mode':
                    if len(parts) > 1:
                        new_mode = parts[1].strip()
                        chatbot.set_system_prompt(new_mode)
                    else:
                        print("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ä–µ–∂–∏–º: /mode <–∫–ª—é—á>")
                        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã:", ", ".join(prompts.keys()))
                    continue
                elif command == '/help':
                    print("üìã –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:")
                    print("   /mode <–∫–ª—é—á> - —Å–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã")
                    print("   /clear - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é")
                    print("   /save [–∏–º—è_—Ñ–∞–π–ª–∞] - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä")
                    print("   /load <–∏–º—è_—Ñ–∞–π–ª–∞> - –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä")
                    print("   /list - —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤")
                    print("   /stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
                    print("   /help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É")
                    print("   /exit - –≤—ã–π—Ç–∏")
                    continue
                else:
                    print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
                    print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥")
                    continue
            
            print("ü§ñ –î—É–º–∞—é...")
            response = chatbot.send_message(user_input)
            print(f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {response}")
            
        except KeyboardInterrupt:
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


if __name__ == "__main__":
    main()