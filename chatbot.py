import requests
import json
import time
from typing import Optional, Dict, Any

class LocalChatBot:
    def __init__(self, base_url: str = "http://localhost:1234"):
        self.base_url = base_url
        self.api_url = f"{base_url}/v1/chat/completions"
        self.model = None
        self.conversation_history = []
        
    def check_connection(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ LM Studio"""
        try:
            response = requests.get(f"{self.base_url}/v1/models")
            if response.status_code == 200:
                models = response.json()
                if models.get('data'):
                    self.model = models['data'][0]['id']
                    print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ LM Studio")
                    print(f"üìã –î–æ—Å—Ç—É–ø–Ω–∞—è –º–æ–¥–µ–ª—å: {self.model}")
                    return True
                else:
                    print("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
                    return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {response.status_code}")
                return False
        except requests.exceptions.ConnectionError:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ LM Studio")
            print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ LM Studio –∑–∞–ø—É—â–µ–Ω –∏ —Å–µ—Ä–≤–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω")
            return False
    
    def send_message(self, message: str, system_prompt: Optional[str] = None) -> str:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–¥–µ–ª–∏"""
        if not self.model:
            if not self.check_connection():
                return "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ LM Studio"
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        messages = []
        
        if system_prompt:
            messages.append({"role": "system", "content": system_prompt})
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        messages.extend(self.conversation_history)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        messages.append({"role": "user", "content": message})
        
        try:
            payload = {
                "model": self.model,
                "messages": messages,
                "temperature": 0.7,
                "max_tokens": 2048,
                "stream": False
            }
            
            response = requests.post(
                self.api_url,
                json=payload,
                headers={"Content-Type": "application/json"}
            )
            
            if response.status_code == 200:
                result = response.json()
                assistant_message = result['choices'][0]['message']['content']
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
                self.conversation_history.append({"role": "user", "content": message})
                self.conversation_history.append({"role": "assistant", "content": assistant_message})
                
                # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π)
                if len(self.conversation_history) > 20:
                    self.conversation_history = self.conversation_history[-20:]
                
                return assistant_message
            else:
                return f"–û—à–∏–±–∫–∞: {response.status_code} - {response.text}"
                
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}"
    
    def clear_history(self):
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        self.conversation_history = []
        print("üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –æ—á–∏—â–µ–Ω–∞")
    
    def save_conversation(self, filename: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –≤ —Ñ–∞–π–ª"""
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(self.conversation_history, f, ensure_ascii=False, indent=2)
            print(f"üíæ –†–∞–∑–≥–æ–≤–æ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {filename}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}")
    
    def load_conversation(self, filename: str):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                self.conversation_history = json.load(f)
            print(f"üìÇ –†–∞–∑–≥–æ–≤–æ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ {filename}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {str(e)}")


def main():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —á–∞—Ç–±–æ—Ç–∞"""
    print("ü§ñ –õ–æ–∫–∞–ª—å–Ω—ã–π —á–∞—Ç–±–æ—Ç –Ω–∞ –±–∞–∑–µ LM Studio")
    print("=" * 50)
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
    system_prompts = {
        "1": {
            "name": "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞",
            "prompt": "–¢—ã - –æ–ø—ã—Ç–Ω—ã–π –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –∏ –ø–æ–º–æ—â–Ω–∏–∫. –ü–æ–º–æ–≥–∞–π —Å –∫–æ–¥–æ–º, –æ–±—ä—è—Å–Ω—è–π –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –∏ –¥–∞–≤–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã."
        },
        "2": {
            "name": "–û–±—â–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç", 
            "prompt": "–¢—ã - –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É."
        },
        "3": {
            "name": "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å",
            "prompt": "–¢—ã - —Ç–µ—Ä–ø–µ–ª–∏–≤—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å. –û–±—ä—è—Å–Ω—è–π —Å–ª–æ–∂–Ω—ã–µ —Ç–µ–º—ã –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –∏ –¥–∞–≤–∞–π –ø—Ä–∏–º–µ—Ä—ã."
        }
    }
    
    print("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:")
    for key, info in system_prompts.items():
        print(f"{key}. {info['name']}")
    
    choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-3): ").strip()
    selected_prompt = system_prompts.get(choice, system_prompts["2"])["prompt"]
    
    chatbot = LocalChatBot()
    
    if not chatbot.check_connection():
        return
    
    print(f"\nüéØ –†–µ–∂–∏–º: {system_prompts.get(choice, system_prompts['2'])['name']}")
    print("üí° –ö–æ–º–∞–Ω–¥—ã: /clear - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é, /save - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä, /exit - –≤—ã–π—Ç–∏")
    print("=" * 50)
    
    while True:
        try:
            user_input = input("\n–í—ã: ").strip()
            
            if user_input.lower() == '/exit':
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            elif user_input.lower() == '/clear':
                chatbot.clear_history()
                continue
            elif user_input.lower() == '/save':
                filename = f"conversation_{int(time.time())}.json"
                chatbot.save_conversation(filename)
                continue
            elif not user_input:
                continue
            
            print("ü§ñ –î—É–º–∞—é...")
            response = chatbot.send_message(user_input, selected_prompt)
            print(f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {response}")
            
        except KeyboardInterrupt:
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


if __name__ == "__main__":
    main()