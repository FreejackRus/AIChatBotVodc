import requests
import json
import os
from datetime import datetime
from typing import List, Dict, Any, Optional
from colorama import init, Fore, Back, Style
from rich.console import Console
from rich.panel import Panel
from rich.markdown import Markdown

from knowledge_base import KnowledgeBase
from embedding_api import EmbeddingAPI, MockEmbeddingAPI
from system_prompts import SYSTEM_PROMPTS, get_prompt
from synonym_dictionary import expand_synonyms

class RAGChatBot:
    """–ß–∞—Ç–±–æ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π RAG (Retrieval-Augmented Generation)"""
    
    def __init__(self, base_url: str = "http://localhost:11434", use_mock_embeddings: bool = False):
        self.base_url = base_url.rstrip("/")
        self.chat_endpoint = f"{self.base_url}/api/chat"
        self.models_endpoint = f"{self.base_url}/api/tags"
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.console = Console()
        self.knowledge_base = KnowledgeBase("knowledge_base")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
        if use_mock_embeddings:
            self.embedding_api = MockEmbeddingAPI()
        else:
            self.embedding_api = EmbeddingAPI(self.base_url)
        
        # –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.current_model = None
        self.current_system_prompt = "general_assistant"
        self.conversation_history = []
        self.use_knowledge_base = True
        self.rag_top_k = 3
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            "total_messages": 0,
            "total_tokens": 0,
            "total_rag_queries": 0,
            "start_time": datetime.now()
        }
        
        print(f"{Fore.GREEN}üè• RAG-—á–∞—Ç–±–æ—Ç –¥–ª—è –í–û–ö–ö–î–¶ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!{Style.RESET_ALL}")
        print(f"{Fore.BLUE}–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –í–æ—Ä–æ–Ω–µ–∂—Å–∫–æ–º –û–±–ª–∞—Å—Ç–Ω–æ–º –ö–ª–∏–Ω–∏—á–µ—Å–∫–æ–º –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ-–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–º –¶–µ–Ω—Ç—Ä–µ{Style.RESET_ALL}")
        print(f"{Fore.BLUE}–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π: {self.knowledge_base.get_stats()}{Style.RESET_ALL}")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –í–û–ö–ö–î–¶
        self.load_vodc_knowledge_base()
    
    def get_available_models(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –∏–∑ Ollama"""
        try:
            response = requests.get(self.models_endpoint, timeout=10)
            if response.status_code == 200:
                data = response.json()
                models = data.get("models") or data.get("data") or []
                names = []
                for m in models:
                    name = m.get("name") or m.get("id") or m.get("model")
                    if name:
                        names.append(name)
                return names
            else:
                print(f"{Fore.RED}–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π: {response.status_code}{Style.RESET_ALL}")
                return []
        except Exception as e:
            print(f"{Fore.RED}–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Ollama: {e}{Style.RESET_ALL}")
            return []
    
    def get_relevant_context(self, query: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        if not self.use_knowledge_base:
            return ""
        
        try:
            # –†–∞—Å—à–∏—Ä—è–µ–º –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—ã –∏ —Å–∏–Ω–æ–Ω–∏–º—ã –≤ –∑–∞–ø—Ä–æ—Å–µ
            expanded_query = expand_synonyms(query)
            if expanded_query != query:
                print(f"{Fore.CYAN}üîç –†–∞—Å—à–∏—Ä–µ–Ω –∑–∞–ø—Ä–æ—Å: '{query}' ‚Üí '{expanded_query}'{Style.RESET_ALL}")
            
            # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É
            results = self.knowledge_base.search(expanded_query, self.embedding_api, self.rag_top_k)
            
            if not results:
                return ""
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context_parts = []
            for i, result in enumerate(results):
                doc = result["document"]
                similarity = result["similarity"]
                
                context_parts.append(f"[–î–æ–∫—É–º–µ–Ω—Ç {i+1} (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {similarity:.2f})]: {doc.content}")
            
            self.stats["total_rag_queries"] += 1
            return "\n\n".join(context_parts)
            
        except Exception as e:
            print(f"{Fore.RED}–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π: {e}{Style.RESET_ALL}")
            return ""
    
    def send_message(self, message: str) -> str:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å —É—á–µ—Ç–æ–º RAG"""
        if not self.current_model:
            models = self.get_available_models()
            if not models:
                return "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"
            self.current_model = models[0]
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
        context = self.get_relevant_context(message)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        system_prompt = get_prompt(self.current_system_prompt)
        
        if context:
            system_prompt += f"\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:\n{context}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        messages = [{"role": "system", "content": system_prompt}]
        messages.extend(self.conversation_history[-10:])  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
        messages.append({"role": "user", "content": message})
        
        try:
            payload = {
                "model": self.current_model,
                "messages": messages,
                "stream": False,
                "options": {
                    "temperature": 0.7,
                    "num_predict": 2000,
                    "top_p": 0.9
                }
            }
            
            response = requests.post(
                self.chat_endpoint,
                json=payload,
                headers={"Content-Type": "application/json"},
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                assistant_message = (
                    data.get("message", {}).get("content")
                    or (data.get("choices", [{}])[0].get("message", {}).get("content"))
                    or ""
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
                self.conversation_history.append({"role": "user", "content": message})
                self.conversation_history.append({"role": "assistant", "content": assistant_message})
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self.stats["total_messages"] += 1
                # –£ Ollama –Ω–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ø–æ–ª—è usage, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–∫–µ–Ω—ã
                
                return assistant_message
            else:
                return f"–û—à–∏–±–∫–∞: {response.status_code} - {response.text}"
                
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}"
    
    def add_document_to_kb(self, file_path: str) -> bool:
        """–î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π"""
        if not os.path.exists(file_path):
            print(f"{Fore.RED}–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}{Style.RESET_ALL}")
            return False
        
        print(f"{Fore.YELLOW}–î–æ–±–∞–≤–ª—è—é –¥–æ–∫—É–º–µ–Ω—Ç –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π...{Style.RESET_ALL}")
        success = self.knowledge_base.add_document_from_file(file_path, self.embedding_api)
        
        if success:
            print(f"{Fore.GREEN}–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π{Style.RESET_ALL}")
            print(f"{Fore.BLUE}–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {self.knowledge_base.get_stats()}{Style.RESET_ALL}")
        else:
            print(f"{Fore.RED}–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç{Style.RESET_ALL}")
        
        return success
    
    def save_conversation(self, filename: str = None):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä"""
        if not filename:
            filename = f"conversation_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        os.makedirs("conversations", exist_ok=True)
        filepath = os.path.join("conversations", filename)
        
        data = {
            "conversation_history": self.conversation_history,
            "stats": self.stats,
            "current_model": self.current_model,
            "current_system_prompt": self.current_system_prompt,
            "saved_at": datetime.now().isoformat()
        }
        
        with open(filepath, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        
        print(f"{Fore.GREEN}–†–∞–∑–≥–æ–≤–æ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filepath}{Style.RESET_ALL}")
    
    def search_vodc_info(self, query: str) -> str:
        """–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –í–û–ö–ö–î–¶"""
        try:
            results = self.knowledge_base.search(query, self.embedding_api, top_k=3)
            if not results:
                return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –í–û–ö–ö–î–¶."
            
            response = f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}':\n\n"
            for i, result in enumerate(results, 1):
                doc = result["document"]
                similarity = result["similarity"]
                response += f"{i}. {doc.content}\n"
                response += f"   (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {similarity:.3f})\n\n"
            
            return response
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}"

    def load_vodc_knowledge_base(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –í–û–ö–ö–î–¶"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π –í–û–ö–ö–î–¶
            vodc_kb_path = "knowledge_base/vodc_complete_info.md"
            if os.path.exists(vodc_kb_path):
                print(f"{Fore.GREEN}–ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –í–û–ö–ö–î–¶...{Style.RESET_ALL}")
                self.add_document_to_kb(vodc_kb_path)
                print(f"{Fore.GREEN}‚úÖ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –í–û–ö–ö–î–¶ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!{Style.RESET_ALL}")
                self.use_knowledge_base = True
            else:
                print(f"{Fore.YELLOW}‚ö†Ô∏è  –§–∞–π–ª –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –í–û–ö–ö–î–¶ –Ω–µ –Ω–∞–π–¥–µ–Ω: {vodc_kb_path}{Style.RESET_ALL}")
                print(f"{Fore.YELLOW}–ó–∞–ø—É—Å—Ç–∏—Ç–µ demo_rag.py –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π{Style.RESET_ALL}")
        except Exception as e:
            print(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –í–û–ö–ö–î–¶: {e}{Style.RESET_ALL}")

    def print_help(self):
        """–í—ã–≤–µ—Å—Ç–∏ —Å–ø—Ä–∞–≤–∫—É"""
        help_text = """
# üè• RAG-—á–∞—Ç–±–æ—Ç –¥–ª—è –í–û–ö–ö–î–¶ - –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

## üîç –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫:
- `/departments` - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–¥–µ–ª–µ–Ω–∏—è—Ö –í–û–ö–ö–î–¶
- `/prices` - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–Ω–∞—Ö –Ω–∞ —É—Å–ª—É–≥–∏
- `/doctors` - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–∞—á–∞—Ö –í–û–ö–ö–î–¶
- `/contacts` - –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –í–û–ö–ö–î–¶
- `/prepare` - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è–º

## üìã –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:
- `/help` - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
- `/clear` - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
- `/save <file>` - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä –≤ —Ñ–∞–π–ª
- `/exit` - –≤—ã–π—Ç–∏

## üìö –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π:
- `/add <file_path>` - –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
- `/kb_on` - –≤–∫–ª—é—á–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
- `/kb_off` - –≤—ã–∫–ª—é—á–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
- `/kb_status` - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
- `/kb_clear` - –æ—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π

## ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:
- `/mode <key>` - —Å–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã (code_assistant, teacher –∏ —Ç.–¥.)
- `/topk <n>` - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3)
- `/models` - –ø–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏

## üí° –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:
- –ö–∞–∫–∏–µ –æ—Ç–¥–µ–ª–µ–Ω–∏—è –µ—Å—Ç—å –≤ –í–û–ö–ö–î–¶?
- –°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –ú–†–¢ –≤ –í–û–ö–ö–î–¶?
- –ö—Ç–æ –≥–ª–∞–≤–Ω—ã–π –≤—Ä–∞—á –∫–∞—Ä–¥–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–¥–µ–ª–µ–Ω–∏—è?
- –ö–∞–∫ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Å–¥–∞—á–µ –∫—Ä–æ–≤–∏?
- –ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –í–û–ö–ö–î–¶?
- –ö–∞–∫–∏–µ –∞–Ω–∞–ª–∏–∑—ã –º–æ–∂–Ω–æ —Å–¥–∞—Ç—å –≤ –í–û–ö–ö–î–¶?
        """
        
        self.console.print(Panel(Markdown(help_text), title="–°–ø—Ä–∞–≤–∫–∞", expand=False))
    
    def run_interactive(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º"""
        print(f"{Fore.GREEN}–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ RAG-—á–∞—Ç–±–æ—Ç!{Style.RESET_ALL}")
        print(f"{Fore.YELLOW}–í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥{Style.RESET_ALL}")
        
        while True:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_input = input(f"{Fore.BLUE}–í—ã: {Style.RESET_ALL}").strip()
                
                if not user_input:
                    continue
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
                if user_input.startswith("/"):
                    parts = user_input.split(" ", 1)
                    command = parts[0].lower()
                    arg = parts[1] if len(parts) > 1 else None
                    
                    if command == "/exit":
                        print(f"{Fore.GREEN}–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!{Style.RESET_ALL}")
                        break
                    
                    elif command == "/help":
                        self.print_help()
                    
                    elif command == "/clear":
                        self.conversation_history = []
                        print(f"{Fore.GREEN}–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞{Style.RESET_ALL}")
                    
                    elif command == "/save":
                        self.save_conversation(arg)
                    
                    elif command == "/add":
                        if arg:
                            self.add_document_to_kb(arg)
                        else:
                            print(f"{Fore.RED}–£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É: /add <file_path>{Style.RESET_ALL}")
                    
                    elif command == "/kb_on":
                        self.use_knowledge_base = True
                        print(f"{Fore.GREEN}–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –≤–∫–ª—é—á–µ–Ω–æ{Style.RESET_ALL}")
                    
                    elif command == "/kb_off":
                        self.use_knowledge_base = False
                        print(f"{Fore.YELLOW}–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –≤—ã–∫–ª—é—á–µ–Ω–æ{Style.RESET_ALL}")
                    
                    elif command == "/kb_stats":
                        stats = self.knowledge_base.get_stats()
                        self.console.print(Panel(str(stats), title="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"))
                    
                    elif command == "/kb_list":
                        docs = self.knowledge_base.list_documents()
                        if docs:
                            print(f"{Fore.GREEN}–î–æ–∫—É–º–µ–Ω—Ç—ã –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π:{Style.RESET_ALL}")
                            for doc in docs:
                                print(f"  - {doc}")
                        else:
                            print(f"{Fore.YELLOW}–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø—É—Å—Ç–∞{Style.RESET_ALL}")
                    
                    elif command == "/kb_clear":
                        self.knowledge_base.clear()
                        print(f"{Fore.GREEN}–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –æ—á–∏—â–µ–Ω–∞{Style.RESET_ALL}")
                    
                    elif command == "/mode":
                        if arg and arg in SYSTEM_PROMPTS:
                            self.current_system_prompt = arg
                            print(f"{Fore.GREEN}–†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {arg}{Style.RESET_ALL}")
                        else:
                            available_modes = ", ".join(SYSTEM_PROMPTS.keys())
                            print(f"{Fore.RED}–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã: {available_modes}{Style.RESET_ALL}")
                    
                    elif command == "/topk":
                        if arg and arg.isdigit():
                            self.rag_top_k = int(arg)
                            print(f"{Fore.GREEN}–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {self.rag_top_k}{Style.RESET_ALL}")
                        else:
                            print(f"{Fore.RED}–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ: /topk 3{Style.RESET_ALL}")
                    
                    elif command == "/models":
                        models = self.get_available_models()
                        if models:
                            print(f"{Fore.GREEN}–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:{Style.RESET_ALL}")
                            for model in models:
                                print(f"  - {model}")
                        else:
                            print(f"{Fore.RED}–ú–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã{Style.RESET_ALL}")
                    
                    elif command == "/departments":
                        print(f"{Fore.YELLOW}–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ç–¥–µ–ª–µ–Ω–∏—è—Ö –í–û–ö–ö–î–¶...{Style.RESET_ALL}")
                        response = self.search_vodc_info("–æ—Ç–¥–µ–ª–µ–Ω–∏—è –í–û–ö–ö–î–¶")
                        self.console.print(Panel(Markdown(response), title="–û—Ç–¥–µ–ª–µ–Ω–∏—è –í–û–ö–ö–î–¶", expand=False))
                    
                    elif command == "/prices":
                        print(f"{Fore.YELLOW}–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–µ–Ω–∞—Ö –í–û–ö–ö–î–¶...{Style.RESET_ALL}")
                        response = self.search_vodc_info("—Ü–µ–Ω—ã —É—Å–ª—É–≥–∏ –í–û–ö–ö–î–¶")
                        self.console.print(Panel(Markdown(response), title="–¶–µ–Ω—ã –Ω–∞ —É—Å–ª—É–≥–∏ –í–û–ö–ö–î–¶", expand=False))
                    
                    elif command == "/doctors":
                        print(f"{Fore.YELLOW}–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Ä–∞—á–∞—Ö –í–û–ö–ö–î–¶...{Style.RESET_ALL}")
                        response = self.search_vodc_info("–≤—Ä–∞—á–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –í–û–ö–ö–î–¶")
                        self.console.print(Panel(Markdown(response), title="–í—Ä–∞—á–∏ –í–û–ö–ö–î–¶", expand=False))
                    
                    elif command == "/contacts":
                        print(f"{Fore.YELLOW}–ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –í–û–ö–ö–î–¶...{Style.RESET_ALL}")
                        response = self.search_vodc_info("–∫–æ–Ω—Ç–∞–∫—Ç—ã –∞–¥—Ä–µ—Å —Ç–µ–ª–µ—Ñ–æ–Ω –í–û–ö–ö–î–¶")
                        self.console.print(Panel(Markdown(response), title="–ö–æ–Ω—Ç–∞–∫—Ç—ã –í–û–ö–ö–î–¶", expand=False))
                    
                    elif command == "/prepare":
                        print(f"{Fore.YELLOW}–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è–º...{Style.RESET_ALL}")
                        response = self.search_vodc_info("–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑—ã")
                        self.console.print(Panel(Markdown(response), title="–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è–º", expand=False))
                    
                    else:
                        print(f"{Fore.RED}–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}{Style.RESET_ALL}")
                        print(f"{Fore.YELLOW}–í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥{Style.RESET_ALL}")
                
                else:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
                    print(f"{Fore.YELLOW}–û–±—Ä–∞–±–æ—Ç–∫–∞...{Style.RESET_ALL}")
                    response = self.send_message(user_input)
                    
                    # –í—ã–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç
                    self.console.print(Panel(Markdown(response), title="–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç", expand=False))
            
            except KeyboardInterrupt:
                print(f"\n{Fore.YELLOW}–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /exit –¥–ª—è –≤—ã—Ö–æ–¥–∞{Style.RESET_ALL}")
            except Exception as e:
                print(f"{Fore.RED}–û—à–∏–±–∫–∞: {e}{Style.RESET_ALL}")

if __name__ == "__main__":
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º colorama
    init()
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —á–∞—Ç–±–æ—Ç–∞
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-—ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ Ollama
    bot = RAGChatBot(use_mock_embeddings=False)
    bot.run_interactive()