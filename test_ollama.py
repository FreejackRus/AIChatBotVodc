#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—ã –¥–ª—è Ollama –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
"""

import unittest
import os
import sys
import json
from unittest.mock import Mock, patch

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from ollama_integration import OllamaAPI, OllamaRAGChatBot
from ollama_rag_system import OllamaRAGSystem

class TestOllamaAPI(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è OllamaAPI"""
    
    def setUp(self):
        self.api = OllamaAPI()
    
    def test_initialization(self):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ API"""
        self.assertIsNotNone(self.api)
        self.assertTrue(hasattr(self.api, 'base_url'))
        self.assertTrue(hasattr(self.api, 'model'))
    
    @patch('requests.post')
    def test_check_connection_success(self, mock_post):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        mock_post.return_value.status_code = 200
        mock_post.return_value.json.return_value = {'status': 'success'}
        
        result = self.api.check_connection()
        self.assertTrue(result)
    
    @patch('requests.post')
    def test_generate_text_success(self, mock_post):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞"""
        mock_post.return_value.status_code = 200
        mock_post.return_value.json.return_value = {
            'response': '–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç'
        }
        
        result = self.api.generate_text('–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å')
        self.assertEqual(result, '–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç')
    
    def test_get_model_info(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏"""
        info = self.api.get_model_info()
        self.assertIsInstance(info, dict)

class TestOllamaRAGChatBot(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è OllamaRAGChatBot"""
    
    def setUp(self):
        self.ollama_api = OllamaAPI()
        self.chatbot = OllamaRAGChatBot(ollama_api=self.ollama_api)
    
    def test_initialization(self):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —á–∞—Ç-–±–æ—Ç–∞"""
        self.assertIsNotNone(self.chatbot)
        self.assertTrue(hasattr(self.chatbot, 'ollama'))

class TestOllamaRAGSystem(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è OllamaRAGSystem"""
    
    def setUp(self):
        self.ollama_api = OllamaAPI()
        self.rag_system = OllamaRAGSystem(ollama_api=self.ollama_api)
    
    def test_initialization(self):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RAG —Å–∏—Å—Ç–µ–º—ã"""
        self.assertIsNotNone(self.rag_system)
        self.assertTrue(hasattr(self.rag_system, 'ollama'))
        self.assertTrue(hasattr(self.rag_system, 'chunks'))
    
    def test_chunk_text(self):
        """–¢–µ—Å—Ç —Ä–∞–∑–±–∏–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞–Ω–∫–∏"""
        text = "–≠—Ç–æ –ø–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. –≠—Ç–æ –≤—Ç–æ—Ä–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. –≠—Ç–æ —Ç—Ä–µ—Ç—å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ."
        chunks = self.rag_system.chunk_text(text, chunk_size=50)
        
        self.assertIsInstance(chunks, list)
        self.assertGreater(len(chunks), 0)
    
    def test_create_embeddings_ollama(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤"""
        texts = ["–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç 1", "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç 2"]
        embeddings = self.rag_system.create_embeddings_ollama(texts)
        
        self.assertIsInstance(embeddings, list)
        self.assertEqual(len(embeddings), 2)
        self.assertIsInstance(embeddings[0], list)
    
    def test_search_similar_chunks_empty(self):
        """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –≤ –ø—É—Å—Ç–æ–π –±–∞–∑–µ"""
        result = self.rag_system.search_similar_chunks("—Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
        self.assertEqual(result, [])
    
    def test_generate_response_no_context(self):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        result = self.rag_system.generate_response("—Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å", [])
        self.assertIn("–ò–∑–≤–∏–Ω–∏—Ç–µ", result)

class TestIntegration(unittest.TestCase):
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã"""
    
    def test_full_workflow(self):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        # –°–æ–∑–¥–∞–µ–º API
        api = OllamaAPI()
        
        # –°–æ–∑–¥–∞–µ–º RAG —Å–∏—Å—Ç–µ–º—É
        rag_system = OllamaRAGSystem(ollama_api=api)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç
        self.assertIsNotNone(api)
        self.assertIsNotNone(rag_system)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–∞—Ç-–±–æ—Ç–∞
        chatbot = OllamaRAGChatBot(ollama_api=api)
        self.assertIsNotNone(chatbot)

if __name__ == '__main__':
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Ollama –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
    unittest.main(verbosity=2)