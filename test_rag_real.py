#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ RAG —Å–∏—Å—Ç–µ–º—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏ –∏–∑ Ollama
"""

from rag_system import RAGSystem

def test_rag_with_real_embeddings():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º RAG —Å–∏—Å—Ç–µ–º—É —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG —Å–∏—Å—Ç–µ–º—ã —Å Ollama...")
    
    # –°–æ–∑–¥–∞–µ–º RAG —Å–∏—Å—Ç–µ–º—É —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏
    print("üìã –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é RAG —Å–∏—Å—Ç–µ–º—É —Å Ollama...")
    rag = RAGSystem(use_mock_embeddings=False)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = rag.get_stats()
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {stats}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
    print("üîç –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–∏—Å–∫...")
    query = "—á—Ç–æ —Ç–∞–∫–æ–µ –í–û–ö–ö–î–¶"
    results = rag.search(query)
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
    
    if results:
        for i, result in enumerate(results[:3]):
            print(f"\nüìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç {i+1}:")
            print(f"   –ö–æ–Ω—Ç–µ–Ω—Ç: {result['content'][:150]}...")
            print(f"   –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {result['score']:.3f}")
    else:
        print("‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç
    print(f"\nü§ñ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å '{query}':")
    response = rag.get_answer(query)
    
    print(f"\nüí° –û—Ç–≤–µ—Ç:")
    print(response['answer'])
    print(f"\nüìñ –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {len(response['sources'])}")
    print(f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {response['confidence']:.3f}")

if __name__ == "__main__":
    test_rag_with_real_embeddings()