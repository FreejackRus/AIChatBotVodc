from flask import Flask, request, jsonify, render_template_string
from flask_cors import CORS
import json
import os
import sys
from datetime import datetime
import uuid

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º RAG-–º–æ–¥—É–ª–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
try:
    from rag_chatbot import RAGChatBot
    from knowledge_base import KnowledgeBase
    from embedding_api import EmbeddingAPI
    print("‚úÖ RAG-–º–æ–¥—É–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
    RAG_AVAILABLE = True
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ RAG-–º–æ–¥—É–ª–µ–π: {e}")
    print("–°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è RAG-—Å–∏—Å—Ç–µ–º—ã...")
    RAG_AVAILABLE = False
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    class RAGChatBot:
        def __init__(self, use_mock_embeddings=False):
            self.knowledge_base = {"–í–û–ö–ö–î–¶": "–í—Å–µ—Ä–æ—Å—Å–∏–π—Å–∫–∏–π –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ü–µ–Ω—Ç—Ä –∫–æ—Å–º–æ–Ω–∞–≤—Ç–∏–∫–∏ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–µ—Ç–µ–π"}
        
        def send_message(self, question):
            return f"–Ø –ø–æ–ª—É—á–∏–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å: '{question}'. –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç RAG-—Å–∏—Å—Ç–µ–º—ã –í–û–ö–ö–î–¶ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π."

app = Flask(__name__)
CORS(app)  # –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π
sessions = {}

class ChatSession:
    def __init__(self, session_id):
        self.session_id = session_id
        self.created_at = datetime.now()
        self.messages = []
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º RAG-—Å–∏—Å—Ç–µ–º—É —Å —É—á–µ—Ç–æ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥—É–ª–µ–π
        try:
            if RAG_AVAILABLE:
                # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—É—é RAG-—Å–∏—Å—Ç–µ–º—É
                self.rag_bot = RAGChatBot(use_mock_embeddings=False)
                print(f"‚úÖ RAG-—á–∞—Ç–±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}")
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
                self.rag_bot = RAGChatBot(use_mock_embeddings=False)
                print(f"‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∞ RAG-—Å–∏—Å—Ç–µ–º—ã –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RAG-—Å–∏—Å—Ç–µ–º—ã: {e}")
            # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
            self.rag_bot = RAGChatBot(use_mock_embeddings=False)
    
    def add_message(self, role, content):
        self.messages.append({
            "role": role,
            "content": content,
            "timestamp": datetime.now().isoformat()
        })
    
    def get_response(self, user_message):
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç RAG-—á–∞—Ç–±–æ—Ç–∞
            answer = self.rag_bot.send_message(user_message)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.add_message("user", user_message)
            self.add_message("assistant", answer)
            
            return {
                "response": answer,
                "confidence": 0.85,
                "sources": ["vodc_complete_info.md"],
                "session_id": self.session_id,
                "rag_available": RAG_AVAILABLE
            }
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ RAG-—á–∞—Ç–±–æ—Ç–µ: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            test_response = f"–Ø –æ–±—Ä–∞–±–æ—Ç–∞–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å: '{user_message}'. –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –í–û–ö–ö–î–¶."
            self.add_message("assistant", test_response)
            
            return {
                "response": test_response,
                "confidence": 0.7,
                "sources": ["vodc_complete_info.md"],
                "session_id": self.session_id,
                "error": str(e),
                "rag_available": False
            }

def get_or_create_session(session_id=None):
    """–ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é"""
    if session_id and session_id in sessions:
        return sessions[session_id]
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
    new_session_id = session_id or str(uuid.uuid4())
    session = ChatSession(new_session_id)
    sessions[new_session_id] = session
    
    return session

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –≤–∏–¥–∂–µ—Ç–æ–º"""
    return render_template_string("""
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>–í–û–ö–ö–î–¶ –ß–∞—Ç–±–æ—Ç</title>
        <link rel="stylesheet" href="/static/styles.css">
        <style>
            body { margin: 0; padding: 20px; font-family: Arial, sans-serif; background: #f0f0f0; }
            .container { max-width: 800px; margin: 0 auto; background: white; padding: 20px; border-radius: 10px; }
            .status { padding: 10px; margin: 10px 0; border-radius: 5px; }
            .status.success { background: #d4edda; color: #155724; border: 1px solid #c3e6cb; }
            .status.error { background: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üöÄ –í–û–ö–ö–î–¶ –ß–∞—Ç–±–æ—Ç</h1>
            <p>–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —á–∞—Ç–±–æ—Ç–∞ –¥–ª—è –í–æ—Ä–æ–Ω–µ–∂—Å–∫–æ–≥–æ –æ–±–ª–∞—Å—Ç–Ω–æ–≥–æ –∫–ª–∏–Ω–∏—á–µ—Å–∫–æ–≥–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ  —Ü–µ–Ω—Ç—Ä–∞.</p>
            
            <div id="status" class="status success">
                ‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ
            </div>
            
            <h2>–¢–µ—Å—Ç API</h2>
            <form id="testForm">
                <input type="text" id="testQuestion" placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å" style="width: 70%; padding: 10px; margin-right: 10px;">
                <button type="submit" style="padding: 10px 20px; background: #007bff; color: white; border: none; border-radius: 5px; cursor: pointer;">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
            </form>
            
            <div id="testResult" style="margin-top: 20px; padding: 15px; background: #f8f9fa; border-radius: 5px; display: none;">
                <strong>–†–µ–∑—É–ª—å—Ç–∞—Ç:</strong>
                <pre id="resultText"></pre>
            </div>
            
            <h2>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏</h2>
            <h3>1. Jivo-–ø–æ–¥–æ–±–Ω—ã–π –≤–∏–¥–∂–µ—Ç (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)</h3>
            <p>–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –≤–∏–¥–∂–µ—Ç —Å –∫—Ä—É–≥–ª–æ–π –∫–Ω–æ–ø–∫–æ–π –∫–∞–∫ —É Jivo:</p>
            <pre style="background: #f8f9fa; padding: 15px; border-radius: 5px; overflow-x: auto;">
&lt;!-- –í–û–ö–ö–î–¶ Jivo-–≤–∏–¥–∂–µ—Ç --&gt;
&lt;iframe 
    src="http://localhost:5000/jivo" 
    width="100%" 
    height="100%" 
    style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; border: none; z-index: 999999;"
&gt;&lt;/iframe&gt;</pre>
            <p><strong>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:</strong> <a href="/jivo" target="_blank">–û—Ç–∫—Ä—ã—Ç—å Jivo-–≤–∏–¥–∂–µ—Ç</a></p>
            
            <h3>2. –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç</h3>
            <p>–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç:</p>
            <pre style="background: #f8f9fa; padding: 15px; border-radius: 5px; overflow-x: auto;">
&lt;!-- –í–û–ö–ö–î–¶ –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç --&gt;
&lt;iframe 
    src="http://localhost:5000/widget" 
    width="380" 
    height="600" 
    style="position: fixed; bottom: 20px; right: 20px; border: none; border-radius: 16px; box-shadow: 0 20px 60px rgba(0,0,0,0.3);"
&gt;&lt;/iframe&gt;</pre>
            
            <h3>2. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ë–∏—Ç—Ä–∏–∫—Å24</h3>
            <p>–î–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ë–∏—Ç—Ä–∏–∫—Å24 –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∏–¥–∂–µ—Ç –∏–ª–∏ REST API:</p>
            <pre style="background: #f8f9fa; padding: 15px; border-radius: 5px; overflow-x: auto;">
// –í –≤–∞—à–µ–º PHP-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –ë–∏—Ç—Ä–∏–∫—Å24
$chatbotUrl = 'http://your-server.com:5000/chat';
$data = [
    'message' => $_POST['message'],
    'session_id' => $_POST['session_id'] ?? null
];

$response = file_get_contents($chatbotUrl, false, stream_context_create([
    'http' => [
        'method' => 'POST',
        'header' => 'Content-Type: application/json',
        'content' => json_encode($data)
    ]
]));

echo $response;</pre>
        </div>
        
        <script>
            document.getElementById('testForm').addEventListener('submit', async (e) => {
                e.preventDefault();
                const question = document.getElementById('testQuestion').value;
                const resultDiv = document.getElementById('testResult');
                const resultText = document.getElementById('resultText');
                
                try {
                    const response = await fetch('/chat', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ message: question })
                    });
                    
                    const data = await response.json();
                    resultText.textContent = JSON.stringify(data, null, 2);
                    resultDiv.style.display = 'block';
                } catch (error) {
                    resultText.textContent = '–û—à–∏–±–∫–∞: ' + error.message;
                    resultDiv.style.display = 'block';
                }
            });
        </script>
    </body>
    </html>
    """)

@app.route('/widget')
def widget():
    """–û–±—ã—á–Ω—ã–π –≤–∏–¥–∂–µ—Ç —á–∞—Ç–±–æ—Ç–∞"""
    try:
        with open('widget/index.html', 'r', encoding='utf-8') as f:
            return f.read()
    except FileNotFoundError:
        return render_template_string("""
        <!DOCTYPE html>
        <html>
        <head>
            <title>–í–∏–¥–∂–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</title>
            <style>
                body { font-family: Arial, sans-serif; padding: 20px; text-align: center; }
                .error { color: #dc3545; }
            </style>
        </head>
        <body>
            <h1 class="error">‚ùå –í–∏–¥–∂–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</h1>
            <p>–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª—ã –≤–∏–¥–∂–µ—Ç–∞ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø–∞–ø–∫–µ widget/</p>
        </body>
        </html>
        """)

@app.route('/jivo')
def jivo_widget():
    """Jivo-–ø–æ–¥–æ–±–Ω—ã–π –≤–∏–¥–∂–µ—Ç —Å –∫—Ä—É–≥–ª–æ–π –∫–Ω–æ–ø–∫–æ–π"""
    try:
        with open('templates/jivo_widget.html', 'r', encoding='utf-8') as f:
            content = f.read()
            # –ó–∞–º–µ–Ω—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏ –Ω–∞ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ
            content = content.replace('/chat', f'{request.host_url}chat')
            return content
    except FileNotFoundError:
        return render_template_string("""
        <!DOCTYPE html>
        <html>
        <head>
            <title>Jivo-–≤–∏–¥–∂–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</title>
            <style>
                body { font-family: Arial, sans-serif; padding: 20px; text-align: center; }
                .error { color: #dc3545; }
            </style>
        </head>
        <body>
            <h1 class="error">‚ùå Jivo-–≤–∏–¥–∂–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</h1>
            <p>–§–∞–π–ª templates/jivo_widget.html –Ω–µ –Ω–∞–π–¥–µ–Ω</p>
        </body>
        </html>
        """)

@app.route('/static/styles.css')
def widget_styles():
    """–°—Ç–∏–ª–∏ –≤–∏–¥–∂–µ—Ç–∞"""
    try:
        with open('widget/styles.css', 'r', encoding='utf-8') as f:
            return f.read(), 200, {'Content-Type': 'text/css'}
    except FileNotFoundError:
        return "/* –°—Ç–∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã */", 404

@app.route('/static/script.js')
def widget_script():
    """–°–∫—Ä–∏–ø—Ç –≤–∏–¥–∂–µ—Ç–∞"""
    try:
        with open('widget/script.js', 'r', encoding='utf-8') as f:
            content = f.read()
            # –û–±–Ω–æ–≤–ª—è–µ–º API endpoint
            content = content.replace(
                "this.apiEndpoint = 'http://localhost:5000/chat';",
                f"this.apiEndpoint = '{request.host_url}chat';"
            )
            return content, 200, {'Content-Type': 'application/javascript'}
    except FileNotFoundError:
        return "console.log('–°–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');", 404

@app.route('/chat', methods=['POST'])
def chat():
    """API endpoint –¥–ª—è —á–∞—Ç–∞"""
    try:
        data = request.get_json()
        
        if not data or 'message' not in data:
            return jsonify({
                "error": "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ",
                "status": "error"
            }), 400
        
        user_message = data['message'].strip()
        session_id = data.get('session_id')
        
        if not user_message:
            return jsonify({
                "error": "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º",
                "status": "error"
            }), 400
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        session = get_or_create_session(session_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç RAG-—Å–∏—Å—Ç–µ–º—ã
        result = session.get_response(user_message)
        
        return jsonify(result)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ API: {e}")
        return jsonify({
            "error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
            "details": str(e),
            "status": "error"
        }), 500

@app.route('/health')
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞"""
    return jsonify({
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "active_sessions": len(sessions),
        "rag_system": "available"
    })

@app.route('/sessions/<session_id>')
def get_session_history(session_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–µ—Å—Å–∏–∏"""
    if session_id in sessions:
        session = sessions[session_id]
        return jsonify({
            "session_id": session_id,
            "created_at": session.created_at.isoformat(),
            "messages": session.messages,
            "message_count": len(session.messages)
        })
    else:
        return jsonify({
            "error": "–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
            "status": "error"
        }), 404

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –í–û–ö–ö–î–¶ —á–∞—Ç–±–æ—Ç–∞...")
    print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoint-—ã:")
    print(f"   - –ì–ª–∞–≤–Ω–∞—è: http://localhost:5000/")
    print(f"   - Jivo-–≤–∏–¥–∂–µ—Ç: http://localhost:5000/jivo (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)")
    print(f"   - –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç: http://localhost:5000/widget")
    print(f"   - API —á–∞—Ç–∞: http://localhost:5000/chat")
    print(f"   - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è: http://localhost:5000/health")
    print()
    print("üìù –î–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ë–∏—Ç—Ä–∏–∫—Å24 –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ URL: http://localhost:5000/chat")
    print("üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö (0.0.0.0) –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –≤–Ω–µ")
    
    app.run(host='0.0.0.0', port=5000, debug=True)