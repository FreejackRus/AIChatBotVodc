from flask import Flask, request, jsonify, render_template_string, send_from_directory
from flask import Response
from flask_cors import CORS
import json
import os
import sys
from datetime import datetime
import uuid
import time
from dotenv import load_dotenv
from ollama_integration import OllamaAPI, OllamaRAGChatBot
from ollama_rag_system import OllamaRAGSystem

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º RAG-–º–æ–¥—É–ª–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
try:
    from rag_chatbot import RAGChatBot
    from knowledge_base import KnowledgeBase
    from embedding_api import EmbeddingAPI
    print("‚úÖ RAG-–º–æ–¥—É–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
    RAG_AVAILABLE = True
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ RAG-–º–æ–¥—É–ª–µ–π: {e}")
    print("–ò—Å–ø–æ–ª—å–∑—É–µ–º Ollama-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é...")
    RAG_AVAILABLE = False
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    class RAGChatBot:
        def __init__(self, use_mock_embeddings=False):
            self.knowledge_base = {"–í–û–ö–ö–î–¶": "–í–æ—Ä–æ–Ω–µ–∂—Å–∫–∏–π –æ–±–ª–∞—Å—Ç–Ω–æ–π –∫–ª–∏–Ω–∏–∫–æ-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä"}
        
        def send_message(self, question):
            return f"–Ø –ø–æ–ª—É—á–∏–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å: '{question}'. –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç RAG-—Å–∏—Å—Ç–µ–º—ã –í–û–ö–ö–î–¶ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π."

# –õ–æ–∫–∞–ª—å–Ω—ã–π –æ—Ñ–ª–∞–π–Ω-–±–æ—Ç –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ (–±–µ–∑ —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤)
class LocalFallbackChatBot:
    def __init__(self):
        # –ü—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        self.hotline = "+7 (473) 202-22-22"
        self.address = "–≥. –í–æ—Ä–æ–Ω–µ–∂, —É–ª. –°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∞—è, 10 (–ø—Ä–∏–º–µ—Ä)"
        self.hours = "–ü–Ω‚Äì–ü—Ç: 8:00‚Äì18:00, –°–±: 9:00‚Äì14:00, –í—Å: –≤—ã—Ö–æ–¥–Ω–æ–π"
    
    def send_message(self, question: str) -> str:
        q = (question or "").lower()
        if any(k in q for k in ["—Ç–µ–ª–µ—Ñ–æ–Ω", "–≥–æ—Ä—è—á", "–∫–æ–Ω—Ç–∞–∫—Ç", "–ø–æ–∑–≤–æ–Ω"]):
            return f"–ì–æ—Ä—è—á–∞—è –ª–∏–Ω–∏—è –í–û–ö–ö–î–¶: {self.hotline}. –ß–µ–º –µ—â–µ –ø–æ–º–æ—á—å?"
        if any(k in q for k in ["–∞–¥—Ä–µ—Å", "–∫–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è", "–≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å"]):
            return f"–ê–¥—Ä–µ—Å –í–û–ö–ö–î–¶: {self.address}. –£—Ç–æ—á–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–æ–∂–Ω–æ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É {self.hotline}."
        if any(k in q for k in ["—Ä–µ–∂–∏–º", "—á–∞—Å—ã", "–≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã", "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"]):
            return f"–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: {self.hours}. –î–ª—è –∑–∞–ø–∏—Å–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç–µ: {self.hotline}."
        if any(k in q for k in ["–∑–∞–ø–∏—Å", "—Ç–∞–ª–æ–Ω", "–ø—Ä–∏—ë–º", "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä"]):
            return f"–ó–∞–ø–∏—Å—å –≤–µ–¥–µ—Ç—Å—è —á–µ—Ä–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—É –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É {self.hotline}. –¢–∞–∫–∂–µ –≤–æ–∑–º–æ–∂–Ω–∞ –∑–∞–ø–∏—Å—å –Ω–∞ –º–µ—Å—Ç–µ."
        return (
            "–Ø —Ä–∞–±–æ—Ç–∞—é –≤ –æ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º–µ –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–æ–¥–µ–ª–∏. "
            "–ü–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å: —É—Ç–æ—á–Ω–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –Ω–∞ –≥–æ—Ä—è—á—É—é –ª–∏–Ω–∏—é "
            f"–í–û–ö–ö–î–¶: {self.hotline}."
        )

app = Flask(__name__)
CORS(app)  # –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤
# –£–ø—Ä–æ—â–∞–µ–º JSON-–æ—Ç–≤–µ—Ç—ã –∏ —è–≤–Ω–æ –∑–∞–¥–∞—ë–º MIME-—Ç–∏–ø
app.config['JSONIFY_PRETTYPRINT_REGULAR'] = False
app.config['JSONIFY_MIMETYPE'] = 'application/json'
load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env, –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π
sessions = {}
start_time = time.time()

class ChatSession:
    def __init__(self, session_id):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ —á–∞—Ç–∞"""
        print(f"üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é —Å–µ—Å—Å–∏—é: {session_id}")
        
        self.session_id = session_id
        self.history = []
        # –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–µ—Å—Å–∏–∏
        self.messages = []
        self.created_at = datetime.now()
        self.ollama_rag = None
        self.rag_bot = None
        
        print(f"üìã –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Å—Å–∏–∏ {session_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AI —Å–∏—Å—Ç–µ–º—ã
        try:
            print(f"ü§ñ –ù–∞—á–∏–Ω–∞—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é AI —Å–∏—Å—Ç–µ–º –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}")
            self._initialize_ai_systems()
            print(f"‚úÖ AI —Å–∏—Å—Ç–µ–º—ã –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AI —Å–∏—Å—Ç–µ–º –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}: {e}")
            raise
    
    def _initialize_ai_systems(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI —Å–∏—Å—Ç–µ–º —Å —É—á–µ—Ç–æ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Ollama
            ollama_url = os.getenv('OLLAMA_URL') or os.getenv('OLLAMA_HOST') or 'http://localhost:11434'
            ollama_model = os.getenv('OLLAMA_MODEL', 'hf.co/unsloth/Qwen3-30B-A3B-Instruct-2507-GGUF:IQ4_XS')
            
            # –°–æ–∑–¥–∞–µ–º OllamaAPI —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            self.ollama_api = OllamaAPI(base_url=ollama_url, model=ollama_model, verbose=True)  # –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Ollama
            if self.ollama_api.check_connection():
                print(f"‚úÖ Ollama –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è —Å–µ—Å—Å–∏–∏ {self.session_id}")
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Ollama RAG —Å–∏—Å—Ç–µ–º—É
                self.ollama_rag = OllamaRAGSystem(self.ollama_api)
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
                kb_path = os.getenv('KNOWLEDGE_BASE_PATH', 'knowledge_base')
                if os.path.exists(kb_path):
                    self._load_knowledge_base()
                
            else:
                print(f"‚ö†Ô∏è  Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É")
                self._initialize_fallback_system()
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Ollama: {e}")
            self._initialize_fallback_system()
    
    def _initialize_fallback_system(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –æ—Ñ–ª–∞–π–Ω-–±–æ—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
            self.rag_bot = LocalFallbackChatBot()
            print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω—ã–π –æ—Ñ–ª–∞–π–Ω-–±–æ—Ç –¥–ª—è —Å–µ—Å—Å–∏–∏ {self.session_id}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: {e}")
            self.rag_bot = LocalFallbackChatBot()
    
    def _load_knowledge_base(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        try:
            kb_path = os.getenv('KNOWLEDGE_BASE_PATH', 'knowledge_base')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –∑–Ω–∞–Ω–∏–π
            knowledge_files = [
                'vodc_complete_info.md',
                'services_info.md',
                'doctors_info.md'
            ]
            
            for filename in knowledge_files:
                filepath = os.path.join(kb_path, filename)
                if os.path.exists(filepath):
                    self.ollama_rag.add_document(filepath)
                    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª –∑–Ω–∞–Ω–∏–π: {filename}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}")
    
    def add_message(self, role, content):
        # Defensive: ensure messages list exists
        if not hasattr(self, 'messages') or self.messages is None:
            self.messages = []
        self.messages.append({
            "role": role,
            "content": content,
            "timestamp": datetime.now().isoformat()
        })
    
    def get_response(self, user_message):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI —Å–∏—Å—Ç–µ–º—ã"""
        print(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å: {user_message[:50]}...")
        
        def _strip_greetings(text: str) -> str:
            """–£–¥–∞–ª—è–µ—Ç —Ç–∏–ø–æ–≤—ã–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –æ–±—Ä–∞—â–µ–Ω–∏—è –∏–∑ –Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—Ç–∞."""
            if not isinstance(text, str):
                return text
            greetings = [
                "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "–î–æ–±—Ä—ã–π –¥–µ–Ω—å", "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä", "–ü—Ä–∏–≤–µ—Ç",
                "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!", "–î–æ–±—Ä—ã–π –¥–µ–Ω—å!", "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä!", "–ü—Ä–∏–≤–µ—Ç!",
                "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ,", "–î–æ–±—Ä—ã–π –¥–µ–Ω—å,", "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä,", "–ü—Ä–∏–≤–µ—Ç,"
            ]
            cleaned = text.strip()
            for g in greetings:
                if cleaned.startswith(g):
                    # –û—Ç—Ä–µ–∑–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–æ–±–µ–ª—ã/–∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
                    cleaned = cleaned[len(g):].lstrip(" ,‚Äî-:;!.")
                    break
            return cleaned.strip()

        try:
            # –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Ollama RAG —Å–∏—Å—Ç–µ–º—É
            if self.ollama_rag:
                print("ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ–º Ollama RAG —Å–∏—Å—Ç–µ–º—É")
                result = self.ollama_rag.query(user_message)
                print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç RAG —Å–∏—Å—Ç–µ–º—ã: {result}")
                
                answer = _strip_greetings(result["response"]) if result.get("response") else ""
                confidence = result["confidence"]
                sources = [source["file"] for source in result["sources"]]
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
                self.add_message("user", user_message)
                self.add_message("assistant", answer)
                
                response_data = {
                    "response": answer,
                    "confidence": confidence,
                    "sources": sources,
                    "session_id": self.session_id,
                    "rag_available": True,
                    "ai_engine": "ollama"
                }
                
                print(f"‚úÖ –í–æ–∑–≤—Ä–∞—â–∞—é –æ—Ç–≤–µ—Ç: {response_data}")
                return response_data
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É
            elif self.rag_bot:
                answer = _strip_greetings(self.rag_bot.send_message(user_message))
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
                self.add_message("user", user_message)
                self.add_message("assistant", answer)
                
                return {
                    "response": answer,
                    "confidence": 0.85,
                    "sources": ["vodc_complete_info.md"],
                    "session_id": self.session_id,
                    "rag_available": RAG_AVAILABLE,
                    "ai_engine": "legacy"
                }
            
            else:
                # –ö—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
                fallback_response = _strip_greetings("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç AI —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –Ω–∞ –≥–æ—Ä—è—á—É—é –ª–∏–Ω–∏—é –í–û–ö–ö–î–¶: +7 (473) 202-22-22")
                
                self.add_message("user", user_message)
                self.add_message("assistant", fallback_response)
                
                return {
                    "response": fallback_response,
                    "confidence": 0.0,
                    "sources": [],
                    "session_id": self.session_id,
                    "rag_available": False,
                    "ai_engine": "none"
                }
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ AI —Å–∏—Å—Ç–µ–º–µ: {e}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            error_response = _strip_greetings("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –Ω–∞ –≥–æ—Ä—è—á—É—é –ª–∏–Ω–∏—é –í–û–ö–ö–î–¶: +7 (473) 202-22-22")
            
            self.add_message("assistant", error_response)
            
            return {
                "response": error_response,
                "confidence": 0.0,
                "sources": [],
                "session_id": self.session_id,
                "error": str(e),
                "rag_available": False,
                "ai_engine": "error"
            }

def get_or_create_session(session_id=None):
    """–ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é"""
    print(f"üîç –ò—â—É —Å–µ—Å—Å–∏—é —Å ID: {session_id}")
    
    if session_id and session_id in sessions:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å–µ—Å—Å–∏—è: {session_id}")
        return sessions[session_id]
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
    new_session_id = session_id or str(uuid.uuid4())
    print(f"üÜï –°–æ–∑–¥–∞—é –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —Å ID: {new_session_id}")
    
    try:
        session = ChatSession(new_session_id)
        sessions[new_session_id] = session
        print(f"‚úÖ –°–µ—Å—Å–∏—è {new_session_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        return session
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
        raise

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –≤–∏–¥–∂–µ—Ç–æ–º"""
    return render_template_string("""
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>–í–û–ö–ö–î–¶ –ß–∞—Ç–±–æ—Ç</title>
        <link rel="stylesheet" href="/static/styles.css">
        <style>
            body { margin: 0; padding: 20px; font-family: Arial, sans-serif; background: #f0f0f0; }
            .container { max-width: 800px; margin: 0 auto; background: white; padding: 20px; border-radius: 10px; }
            .status { padding: 10px; margin: 10px 0; border-radius: 5px; }
            .status.success { background: #d4edda; color: #155724; border: 1px solid #c3e6cb; }
            .status.error { background: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üöÄ –í–û–ö–ö–î–¶ –ß–∞—Ç–±–æ—Ç</h1>
            <p>–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —á–∞—Ç–±–æ—Ç–∞ –¥–ª—è –í–æ—Ä–æ–Ω–µ–∂—Å–∫–æ–≥–æ –æ–±–ª–∞—Å—Ç–Ω–æ–≥–æ –∫–ª–∏–Ω–∏—á–µ—Å–∫–æ–≥–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ  —Ü–µ–Ω—Ç—Ä–∞.</p>
            
            <div id="status" class="status success">
                ‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ
            </div>
            
            <h2>–¢–µ—Å—Ç API</h2>
            <form id="testForm">
                <input type="text" id="testQuestion" placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å" style="width: 70%; padding: 10px; margin-right: 10px;">
                <button type="submit" style="padding: 10px 20px; background: #007bff; color: white; border: none; border-radius: 5px; cursor: pointer;">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
            </form>
            
            <div id="testResult" style="margin-top: 20px; padding: 15px; background: #f8f9fa; border-radius: 5px; display: none;">
                <strong>–†–µ–∑—É–ª—å—Ç–∞—Ç:</strong>
                <pre id="resultText"></pre>
            </div>
            
            <h2>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏</h2>
            <h3>1. Jivo-–ø–æ–¥–æ–±–Ω—ã–π –≤–∏–¥–∂–µ—Ç (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)</h3>
            <p>–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –≤–∏–¥–∂–µ—Ç —Å –∫—Ä—É–≥–ª–æ–π –∫–Ω–æ–ø–∫–æ–π –∫–∞–∫ —É Jivo:</p>
            <pre style="background: #f8f9fa; padding: 15px; border-radius: 5px; overflow-x: auto;">
&lt;!-- –í–û–ö–ö–î–¶ Jivo-–≤–∏–¥–∂–µ—Ç --&gt;
&lt;iframe 
    src="http://localhost:8085/jivo" 
    width="100%" 
    height="100%" 
    style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; border: none; z-index: 999999;"
&gt;&lt;/iframe&gt;</pre>
            <p><strong>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:</strong> <a href="/jivo" target="_blank">–û—Ç–∫—Ä—ã—Ç—å Jivo-–≤–∏–¥–∂–µ—Ç</a></p>
            
            <h3>2. –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç</h3>
            <p>–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç:</p>
            <pre style="background: #f8f9fa; padding: 15px; border-radius: 5px; overflow-x: auto;">
&lt;!-- –í–û–ö–ö–î–¶ –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç --&gt;
&lt;iframe 
    src="http://localhost:8085/widget" 
    width="380" 
    height="600" 
    style="position: fixed; bottom: 20px; right: 20px; border: none; border-radius: 16px; box-shadow: 0 20px 60px rgba(0,0,0,0.3);"
&gt;&lt;/iframe&gt;</pre>
            
            <h3>2. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ë–∏—Ç—Ä–∏–∫—Å24</h3>
            <p>–î–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ë–∏—Ç—Ä–∏–∫—Å24 –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∏–¥–∂–µ—Ç –∏–ª–∏ REST API:</p>
            <pre style="background: #f8f9fa; padding: 15px; border-radius: 5px; overflow-x: auto;">
// –í –≤–∞—à–µ–º PHP-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –ë–∏—Ç—Ä–∏–∫—Å24
$chatbotUrl = 'http://your-server.com:8085/chat';
$data = [
    'message' => $_POST['message'],
    'session_id' => $_POST['session_id'] ?? null
];

$response = file_get_contents($chatbotUrl, false, stream_context_create([
    'http' => [
        'method' => 'POST',
        'header' => 'Content-Type: application/json',
        'content' => json_encode($data)
    ]
]));

echo $response;</pre>
        </div>
        
        <script>
            document.getElementById('testForm').addEventListener('submit', async (e) => {
                e.preventDefault();
                const question = document.getElementById('testQuestion').value;
                const resultDiv = document.getElementById('testResult');
                const resultText = document.getElementById('resultText');
                
                try {
                    const response = await fetch('/chat', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ message: question })
                    });
                    
                    const data = await response.json();
                    resultText.textContent = JSON.stringify(data, null, 2);
                    resultDiv.style.display = 'block';
                } catch (error) {
                    resultText.textContent = '–û—à–∏–±–∫–∞: ' + error.message;
                    resultDiv.style.display = 'block';
                }
            });
        </script>
    </body>
    </html>
    """)

@app.route('/widget')
def widget():
    """–û–±—ã—á–Ω—ã–π –≤–∏–¥–∂–µ—Ç —á–∞—Ç–±–æ—Ç–∞"""
    try:
        with open('widget/index.html', 'r', encoding='utf-8') as f:
            return f.read()
    except FileNotFoundError:
        return render_template_string("""
        <!DOCTYPE html>
        <html>
        <head>
            <title>–í–∏–¥–∂–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</title>
            <style>
                body { font-family: Arial, sans-serif; padding: 20px; text-align: center; }
                .error { color: #dc3545; }
            </style>
        </head>
        <body>
            <h1 class="error">‚ùå –í–∏–¥–∂–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</h1>
            <p>–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª—ã –≤–∏–¥–∂–µ—Ç–∞ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø–∞–ø–∫–µ widget/</p>
        </body>
        </html>
        """)

@app.route('/jivo')
def jivo_widget():
    """Jivo-–ø–æ–¥–æ–±–Ω—ã–π –≤–∏–¥–∂–µ—Ç —Å –∫—Ä—É–≥–ª–æ–π –∫–Ω–æ–ø–∫–æ–π"""
    try:
        with open('templates/jivo_widget.html', 'r', encoding='utf-8') as f:
            content = f.read()
            # –ó–∞–º–µ–Ω—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏ –Ω–∞ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ
            content = content.replace('/chat', f'{request.host_url}chat')
            return content
    except FileNotFoundError:
        return render_template_string("""
        <!DOCTYPE html>
        <html>
        <head>
            <title>Jivo-–≤–∏–¥–∂–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</title>
            <style>
                body { font-family: Arial, sans-serif; padding: 20px; text-align: center; }
                .error { color: #dc3545; }
            </style>
        </head>
        <body>
            <h1 class="error">‚ùå Jivo-–≤–∏–¥–∂–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</h1>
            <p>–§–∞–π–ª templates/jivo_widget.html –Ω–µ –Ω–∞–π–¥–µ–Ω</p>
        </body>
        </html>
        """)

@app.route('/static/styles.css')
def widget_styles():
    """–°—Ç–∏–ª–∏ –≤–∏–¥–∂–µ—Ç–∞"""
    try:
        with open('widget/styles.css', 'r', encoding='utf-8') as f:
            return f.read(), 200, {'Content-Type': 'text/css'}
    except FileNotFoundError:
        return "/* –°—Ç–∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã */", 404

@app.route('/static/script.js')
def widget_script():
    """–°–∫—Ä–∏–ø—Ç –≤–∏–¥–∂–µ—Ç–∞"""
    try:
        with open('widget/script.js', 'r', encoding='utf-8') as f:
            content = f.read()
            # –û–±–Ω–æ–≤–ª—è–µ–º API endpoint
            content = content.replace("this.apiEndpoint = 'http://localhost:8085/chat';", f"this.apiEndpoint = '{request.host_url}chat';")
            content = content.replace("this.apiEndpoint = '/chat';", f"this.apiEndpoint = '{request.host_url}chat';")
            return content, 200, {'Content-Type': 'application/javascript'}
    except FileNotFoundError:
        return "console.log('–°–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');", 404

@app.route('/static/loader.js')
def widget_loader_script():
    """–ó–∞–≥—Ä—É–∑—á–∏–∫ –≤–∏–¥–∂–µ—Ç–∞ (–∏–Ω–∂–µ–∫—Ç–æ—Ä)"""
    try:
        with open('widget/loader.js', 'r', encoding='utf-8') as f:
            content = f.read()
            # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø—É—Ç–∏ –∫ —Å—Ç–∏–ª—è–º –∏ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Å–∫—Ä–∏–ø—Ç—É
            content = content.replace("/static/styles.css", f"{request.host_url}static/styles.css")
            content = content.replace("/static/script.js", f"{request.host_url}static/script.js")
            return content, 200, {'Content-Type': 'application/javascript'}
    except FileNotFoundError:
        return "console.log('Loader –Ω–µ –Ω–∞–π–¥–µ–Ω');", 404

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç–æ–≤
@app.after_request
def add_common_headers(response):
    response.headers['Connection'] = 'close'
    response.headers['Access-Control-Allow-Origin'] = '*'
    response.headers['Access-Control-Allow-Methods'] = 'GET, POST, OPTIONS'
    response.headers['Access-Control-Allow-Headers'] = 'Content-Type, Authorization'
    return response

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ñ–ª–∞–π—Ç-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è /chat
@app.route('/chat', methods=['OPTIONS'])
def chat_options():
    return ('', 204)

@app.route('/chat', methods=['POST'])
def chat():
    """API endpoint –¥–ª—è —á–∞—Ç–∞"""
    print("üì® –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –∫ /chat endpoint")
    print(f"üîç –ú–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞: {request.method}")
    print(f"üîç Content-Type: {request.content_type}")
    print(f"üîç Headers: {dict(request.headers)}")
    
    try:
        # –ë–æ–ª–µ–µ –Ω–∞–¥—ë–∂–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ JSON: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–æ—Å–æ–±, –∑–∞—Ç–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π
        print("üîç –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å JSON –¥–∞–Ω–Ω—ã–µ...")
        data = request.get_json(silent=True)
        print(f"üîç –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")
        if data is None:
            try:
                data = json.loads(request.data.decode('utf-8'))
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                return jsonify({
                    "error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON",
                    "details": str(e),
                    "status": "error"
                }), 400
        
        print(f"üìã –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞: {data}")
        
        if not data or 'message' not in data:
            print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ message –≤ –∑–∞–ø—Ä–æ—Å–µ")
            return jsonify({
                "error": "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ",
                "status": "error"
            }), 400
        
        user_message = data['message'].strip()
        session_id = data.get('session_id')
        
        print(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_message}")
        print(f"üîë ID —Å–µ—Å—Å–∏–∏: {session_id}")
        
        if not user_message:
            print("‚ùå –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return jsonify({
                "error": "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º",
                "status": "error"
            }), 400
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        print("üîÑ –ü–æ–ª—É—á–∞—é –∏–ª–∏ —Å–æ–∑–¥–∞—é —Å–µ—Å—Å–∏—é...")
        session = get_or_create_session(session_id)
        print(f"‚úÖ –°–µ—Å—Å–∏—è –ø–æ–ª—É—á–µ–Ω–∞: {session.session_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç RAG-—Å–∏—Å—Ç–µ–º—ã
        print("ü§ñ –ü–æ–ª—É—á–∞—é –æ—Ç–≤–µ—Ç –æ—Ç RAG-—Å–∏—Å—Ç–µ–º—ã...")
        result = session.get_response(user_message)
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        
        return jsonify(result)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ API: {e}")
        return jsonify({
            "error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
            "details": str(e),
            "status": "error"
        }), 500

# SSE –ø–æ—Ç–æ–∫ –¥–ª—è —á–∞—Ç–∞
@app.route('/chat/stream', methods=['GET'])
def chat_stream():
    """SSE endpoint: –ø—Ä–∏–Ω–∏–º–∞–µ—Ç query –ø–∞—Ä–∞–º–µ—Ç—Ä message –∏ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π session_id."""
    try:
        user_message = request.args.get('message', '').strip()
        session_id = request.args.get('session_id')
        if not user_message:
            return jsonify({"error": "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"}), 400

        session = get_or_create_session(session_id)

        def sse_gen():
            # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω RAG, —Å—Ç—Ä–∏–º–∏–º; –∏–Ω–∞—á–µ –æ—Ç–¥–∞–µ–º –µ–¥–∏–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –ª–æ–∫–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            if session.ollama_rag:
                for event in session.ollama_rag.stream_query(user_message):
                    yield f"data: {json.dumps(event, ensure_ascii=False)}\n\n"
            elif session.rag_bot:
                answer = session.rag_bot.send_message(user_message)
                meta = {"type": "meta", "sources": ["offline"], "confidence": 0.85}
                yield f"data: {json.dumps(meta, ensure_ascii=False)}\n\n"
                yield f"data: {json.dumps({"type": "token", "text": answer}, ensure_ascii=False)}\n\n"
                yield f"data: {json.dumps({"type": "done", "response": answer}, ensure_ascii=False)}\n\n"
            else:
                fallback = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç AI —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –Ω–∞ –≥–æ—Ä—è—á—É—é –ª–∏–Ω–∏—é –í–û–ö–ö–î–¶: +7 (473) 202-22-22"
                yield f"data: {json.dumps({"type": "done", "response": fallback}, ensure_ascii=False)}\n\n"

        headers = {
            'Content-Type': 'text/event-stream',
            'Cache-Control': 'no-cache',
            'Connection': 'keep-alive',
            'Access-Control-Allow-Origin': '*'
        }
        return Response(sse_gen(), headers=headers)
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/health')
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Ollama
    ollama_status = False
    try:
        ollama_api = OllamaAPI()
        ollama_status = ollama_api.check_connection()
    except:
        ollama_status = False
    
    return jsonify({
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "rag_available": RAG_AVAILABLE,
        "ollama_available": ollama_status,
        "active_sessions": len(sessions),
        "uptime": time.time() - start_time if 'start_time' in locals() else 0
    })

@app.route('/ollama/status')
def ollama_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Ollama"""
    try:
        ollama_api = OllamaAPI()
        models = ollama_api.get_available_models()
        return jsonify({
            "status": "connected",
            "available_models": models,
            "current_model": os.getenv('OLLAMA_MODEL', 'hf.co/unsloth/Qwen3-30B-A3B-Instruct-2507-GGUF:IQ4_XS')
        })
    except Exception as e:
        return jsonify({
            "status": "error",
            "error": str(e)
        }), 500

@app.route('/ollama/models')
def list_ollama_models():
    """–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π Ollama"""
    try:
        ollama_api = OllamaAPI()
        models = ollama_api.get_available_models()
        return jsonify({"models": models})
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/sessions/<session_id>')
def get_session_history(session_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–µ—Å—Å–∏–∏"""
    if session_id in sessions:
        session = sessions[session_id]
        return jsonify({
            "session_id": session_id,
            "created_at": session.created_at.isoformat(),
            "messages": session.messages,
            "message_count": len(session.messages)
        })
    else:
        return jsonify({
            "error": "–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
            "status": "error"
        }), 404

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –í–û–ö–ö–î–¶ —á–∞—Ç–±–æ—Ç–∞...")
    print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoint-—ã:")
    print(f"   - –ì–ª–∞–≤–Ω–∞—è: http://0.0.0.0:8085/")
    print(f"   - Jivo-–≤–∏–¥–∂–µ—Ç: http://0.0.0.0:8085/jivo (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)")
    print(f"   - –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç: http://0.0.0.0:8085/widget")
    print(f"   - API —á–∞—Ç–∞: http://0.0.0.0:8085/chat")
    print(f"   - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è: http://0.0.0.0:8085/health")
    print()
    print("üìù –î–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ë–∏—Ç—Ä–∏–∫—Å24 –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ URL: http://localhost:8085/chat")
    print("üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö (0.0.0.0) –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –≤–Ω–µ")
    
    host = os.getenv('FLASK_HOST', '0.0.0.0')
    port = int(os.getenv('FLASK_PORT', 8085))
    debug = os.getenv('FLASK_DEBUG', 'True').lower() in ('true', '1', 'yes')
    
    # –û—Ç–∫–ª—é—á–∞–µ–º –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑—á–∏–∫ –∏ –≤–∫–ª—é—á–∞–µ–º –ø–æ—Ç–æ–∫–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ POST
    app.run(host=host, port=port, debug=debug, use_reloader=False, threaded=True)
